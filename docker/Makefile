# Makefile para CrystoDolar con Docker
# Uso: make [target] (desde la carpeta docker/)

.PHONY: help build dev start stop restart logs shell clean prod-build prod-start prod-stop prod-restart prod-logs prod-deploy prod-monitor

# Variables
DOCKER_DEV_COMPOSE = docker-compose.dev.yml
DOCKER_PROD_COMPOSE = docker-compose.prod.yml
SERVICE_NAME = crystodolar-frontend

# Colores para output
GREEN = \033[0;32m
YELLOW = \033[1;33m
BLUE = \033[0;34m
NC = \033[0m # No Color

# Target por defecto
help: ## Mostrar esta ayuda
	@echo "$(BLUE)CrystoDolar Docker Commands$(NC)"
	@echo ""
	@echo "$(GREEN)Desarrollo:$(NC)"
	@echo "  make build      - Construir imagen de desarrollo"
	@echo "  make dev        - Iniciar modo desarrollo"
	@echo "  make start      - Iniciar servicios de desarrollo"
	@echo "  make stop       - Detener servicios"
	@echo "  make restart    - Reiniciar servicios"
	@echo "  make logs       - Ver logs"
	@echo "  make shell      - Abrir shell en contenedor"
	@echo ""
	@echo "$(GREEN)Producci√≥n:$(NC)"
	@echo "  make prod-build   - Construir imagen de producci√≥n"
	@echo "  make prod-start   - Iniciar servicios de producci√≥n"
	@echo "  make prod-stop    - Detener servicios de producci√≥n"
	@echo "  make prod-restart - Reiniciar servicios de producci√≥n"
	@echo "  make prod-logs    - Ver logs de producci√≥n"
	@echo "  make prod-deploy  - Despliegue completo"
	@echo "  make prod-monitor - Monitorear servicios"
	@echo ""
	@echo "$(GREEN)Utilidades:$(NC)"
	@echo "  make clean      - Limpiar contenedores e im√°genes"
	@echo "  make status     - Ver estado de servicios"
	@echo "  make health     - Verificar salud de servicios"
	@echo ""
	@echo "$(GREEN)Scripts:$(NC)"
	@echo "  make scripts    - Mostrar scripts disponibles"
	@echo "  make nginx      - Mostrar configuraci√≥n Nginx"

# ========================================
# DESARROLLO
# ========================================

build: ## Construir imagen de desarrollo
	@echo "$(BLUE)üî® Construyendo imagen de desarrollo...$(NC)"
	docker-compose -f $(DOCKER_DEV_COMPOSE) build
	@echo "$(GREEN)‚úÖ Imagen construida exitosamente$(NC)"

dev: ## Iniciar modo desarrollo
	@echo "$(BLUE)üöÄ Iniciando modo desarrollo...$(NC)"
	docker-compose -f $(DOCKER_DEV_COMPOSE) up
	@echo "$(GREEN)‚úÖ Desarrollo iniciado$(NC)"

start: ## Iniciar servicios de desarrollo
	@echo "$(BLUE)üöÄ Iniciando servicios de desarrollo...$(NC)"
	docker-compose -f $(DOCKER_DEV_COMPOSE) up -d
	@echo "$(GREEN)‚úÖ Servicios iniciados en http://localhost:3000$(NC)"

stop: ## Detener servicios
	@echo "$(BLUE)üõë Deteniendo servicios...$(NC)"
	docker-compose -f $(DOCKER_DEV_COMPOSE) down
	@echo "$(GREEN)‚úÖ Servicios detenidos$(NC)"

restart: ## Reiniciar servicios
	@echo "$(BLUE)üîÑ Reiniciando servicios...$(NC)"
	docker-compose -f $(DOCKER_DEV_COMPOSE) restart
	@echo "$(GREEN)‚úÖ Servicios reiniciados$(NC)"

logs: ## Mostrar logs
	@echo "$(BLUE)üìã Mostrando logs...$(NC)"
	docker-compose -f $(DOCKER_DEV_COMPOSE) logs -f

shell: ## Abrir shell en contenedor
	@echo "$(BLUE)üêö Abriendo shell...$(NC)"
	docker-compose -f $(DOCKER_DEV_COMPOSE) exec $(SERVICE_NAME) /bin/sh

# ========================================
# PRODUCCI√ìN
# ========================================

prod-build: ## Construir imagen de producci√≥n
	@echo "$(BLUE)üî® Construyendo imagen de producci√≥n...$(NC)"
	docker-compose -f $(DOCKER_PROD_COMPOSE) build --no-cache
	@echo "$(GREEN)‚úÖ Imagen de producci√≥n construida$(NC)"

prod-start: ## Iniciar servicios de producci√≥n
	@echo "$(BLUE)üöÄ Iniciando servicios de producci√≥n...$(NC)"
	docker-compose -f $(DOCKER_PROD_COMPOSE) up -d
	@echo "$(GREEN)‚úÖ Servicios de producci√≥n iniciados$(NC)"

prod-stop: ## Detener servicios de producci√≥n
	@echo "$(BLUE)üõë Deteniendo servicios de producci√≥n...$(NC)"
	docker-compose -f $(DOCKER_PROD_COMPOSE) down
	@echo "$(GREEN)‚úÖ Servicios de producci√≥n detenidos$(NC)"

prod-restart: ## Reiniciar servicios de producci√≥n
	@echo "$(BLUE)üîÑ Reiniciando servicios de producci√≥n...$(NC)"
	docker-compose -f $(DOCKER_PROD_COMPOSE) restart
	@echo "$(GREEN)‚úÖ Servicios de producci√≥n reiniciados$(NC)"

prod-logs: ## Ver logs de producci√≥n
	@echo "$(BLUE)üìã Mostrando logs de producci√≥n...$(NC)"
	docker-compose -f $(DOCKER_PROD_COMPOSE) logs -f

prod-deploy: ## Despliegue completo de producci√≥n
	@echo "$(BLUE)üöÄ Iniciando despliegue completo...$(NC)"
	@$(MAKE) prod-build
	@$(MAKE) prod-stop
	@$(MAKE) prod-start
	@echo "$(GREEN)‚úÖ Despliegue completado$(NC)"

prod-monitor: ## Monitorear servicios de producci√≥n
	@echo "$(BLUE)üìä Monitoreando servicios...$(NC)"
	@echo "=== Estado de los Contenedores ==="
	docker-compose -f $(DOCKER_PROD_COMPOSE) ps
	@echo ""
	@echo "=== Uso de Recursos ==="
	docker stats --no-stream

# ========================================
# UTILIDADES
# ========================================

status: ## Ver estado de servicios
	@echo "$(BLUE)üìä Estado de servicios:$(NC)"
	docker-compose -f $(DOCKER_DEV_COMPOSE) ps
	@echo ""
	@echo "$(BLUE)üìä Estado de servicios de producci√≥n:$(NC)"
	docker-compose -f $(DOCKER_PROD_COMPOSE) ps

health: ## Verificar salud de servicios
	@echo "$(BLUE)üè• Verificando salud de servicios...$(NC)"
	@if curl -f http://localhost:3000/health > /dev/null 2>&1; then \
		echo "$(GREEN)‚úÖ Health check exitoso$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Health check fall√≥$(NC)"; \
	fi

clean: ## Limpiar contenedores e im√°genes
	@echo "$(YELLOW)üßπ Limpiando Docker...$(NC)"
	docker-compose -f $(DOCKER_DEV_COMPOSE) down -v --rmi all
	docker-compose -f $(DOCKER_PROD_COMPOSE) down -v --rmi all
	docker system prune -f
	@echo "$(GREEN)‚úÖ Limpieza completada$(NC)"

# ========================================
# INFORMACI√ìN
# ========================================

scripts: ## Mostrar scripts disponibles
	@echo "$(BLUE)üìú Scripts disponibles:$(NC)"
	@echo ""
	@echo "$(GREEN)Desarrollo:$(NC)"
	@echo "  scripts/docker-dev.sh    - Script Unix para desarrollo"
	@echo "  scripts/docker-dev.bat   - Script Windows para desarrollo"
	@echo ""
	@echo "$(GREEN)Producci√≥n:$(NC)"
	@echo "  scripts/docker-prod.sh   - Script Unix para producci√≥n"
	@echo "  scripts/docker-prod.bat  - Script Windows para producci√≥n"
	@echo ""
	@echo "$(GREEN)Uso:$(NC)"
	@echo "  ./scripts/docker-dev.sh help"
	@echo "  scripts/docker-prod.bat help"

nginx: ## Mostrar configuraci√≥n Nginx
	@echo "$(BLUE)üåê Configuraci√≥n Nginx:$(NC)"
	@echo ""
	@echo "Archivo: configs/nginx.conf"
	@echo "Puertos: 80 (HTTP) y 443 (HTTPS)"
	@echo ""
	@echo "Para usar Nginx:"
	@echo "  docker-compose -f docker-compose.prod.yml --profile nginx up -d"

# ========================================
# DESARROLLO R√ÅPIDO
# ========================================

quick-dev: ## Desarrollo r√°pido (build + start)
	@$(MAKE) build
	@$(MAKE) start
	@echo "$(GREEN)‚úÖ Desarrollo r√°pido iniciado$(NC)"

quick-prod: ## Producci√≥n r√°pida (build + start)
	@$(MAKE) prod-build
	@$(MAKE) prod-start
	@echo "$(GREEN)‚úÖ Producci√≥n r√°pida iniciada$(NC)"

# ========================================
# DEBUGGING
# ========================================

debug: ## Modo debug con logs
	@echo "$(BLUE)üêõ Modo debug activado...$(NC)"
	docker-compose -f $(DOCKER_DEV_COMPOSE) logs -f --tail=100

debug-prod: ## Modo debug de producci√≥n
	@echo "$(BLUE)üêõ Debug de producci√≥n...$(NC)"
	docker-compose -f $(DOCKER_PROD_COMPOSE) logs -f --tail=100

# ========================================
# MANTENIMIENTO
# ========================================

backup: ## Crear backup
	@echo "$(BLUE)üíæ Creando backup...$(NC)"
	@mkdir -p backups
	@docker run --rm -v crystodolar-frontend_crystodolar-network:/data -v $(PWD)/backups:/backup alpine tar czf "/backup/crystodolar-backup-$(shell date +%Y%m%d-%H%M%S).tar" -C /data .
	@echo "$(GREEN)‚úÖ Backup creado$(NC)"

update: ## Actualizar desde git y redeploy
	@echo "$(BLUE)üîÑ Actualizando desde git...$(NC)"
	@cd .. && git pull origin main
	@$(MAKE) prod-deploy
	@echo "$(GREEN)‚úÖ Actualizaci√≥n completada$(NC)"
